#!perl

use strict;
use warnings;

use Test::Most;

use FindBin qw($Bin);
use Path::Class qw(dir file);

use Dist::Requires;

#--------------------------------------------------------------------------

my $dists_dir = dir($Bin, 'dists');

#--------------------------------------------------------------------------
# First, clean up any files generated by previous test

for my $dist_dir ($dists_dir->children) {
    for my $child ($dist_dir->children) {

        next if $child->basename =~ /.PL/;
        next if $child->basename eq '.gitignore';

        $child->remove if -f $child;
        $child->rmtree if -d $child;

        ok( ! -e $child, "$child is gone" );
    }
}

#--------------------------------------------------------------------------
# No filter

{
    my $expect = { Foo => 'v1.0.3', Bar => '1.004_01', Baz => 0 };
    my $filter = {};

    for my $dist_dir ($dists_dir->children) {
        my $dr = Dist::Requires->new(filter => $filter);
        my %got = $dr->prerequisites(dist => $dist_dir);

        # Ignore prereqs imposed by toolchain
        delete $got{'ExtUtils::MakeMaker'};
        delete $got{'Module::Build'};

        is_deeply(\%got, $expect, "Prereqs for $dist_dir");
    }
}

#--------------------------------------------------------------------------
# With filter

{
    my $expect = {Foo => 'v1.0.3', Baz => 0};
    my $filter = {Foo => 'v1.0.1', Bar => '2.1'};

    for my $dist_dir ($dists_dir->children) {
        my $dr = Dist::Requires->new(filter => $filter);
        my %got = $dr->prerequisites(dist => $dist_dir);

        # Ignore prereqs imposed by toolchain
        delete $got{'ExtUtils::MakeMaker'};
        delete $got{'Module::Build'};

        is_deeply(\%got, $expect, "Filtered prereqs for $dist_dir");
    }
}

#--------------------------------------------------------------------------
# Failures


#--------------------------------------------------------------------------
done_testing;
